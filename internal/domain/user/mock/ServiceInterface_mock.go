// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package user_mock

import (
	"github.com/emanuel3k/playlist-transfer/internal/dtos"
	"github.com/emanuel3k/playlist-transfer/pkg/web"
	mock "github.com/stretchr/testify/mock"
)

// NewServiceInterfaceMock creates a new instance of ServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceInterfaceMock {
	mock := &ServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ServiceInterfaceMock is an autogenerated mock type for the ServiceInterface type
type ServiceInterfaceMock struct {
	mock.Mock
}

type ServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceInterfaceMock) EXPECT() *ServiceInterfaceMock_Expecter {
	return &ServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type ServiceInterfaceMock
func (_mock *ServiceInterfaceMock) Create(body dtos.CreateUserDTO) (*dtos.UserResponseDTO, *web.AppError) {
	ret := _mock.Called(body)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *dtos.UserResponseDTO
	var r1 *web.AppError
	if returnFunc, ok := ret.Get(0).(func(dtos.CreateUserDTO) (*dtos.UserResponseDTO, *web.AppError)); ok {
		return returnFunc(body)
	}
	if returnFunc, ok := ret.Get(0).(func(dtos.CreateUserDTO) *dtos.UserResponseDTO); ok {
		r0 = returnFunc(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.UserResponseDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dtos.CreateUserDTO) *web.AppError); ok {
		r1 = returnFunc(body)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*web.AppError)
		}
	}
	return r0, r1
}

// ServiceInterfaceMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ServiceInterfaceMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - body dtos.CreateUserDTO
func (_e *ServiceInterfaceMock_Expecter) Create(body interface{}) *ServiceInterfaceMock_Create_Call {
	return &ServiceInterfaceMock_Create_Call{Call: _e.mock.On("Create", body)}
}

func (_c *ServiceInterfaceMock_Create_Call) Run(run func(body dtos.CreateUserDTO)) *ServiceInterfaceMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dtos.CreateUserDTO
		if args[0] != nil {
			arg0 = args[0].(dtos.CreateUserDTO)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ServiceInterfaceMock_Create_Call) Return(userResponseDTO *dtos.UserResponseDTO, appError *web.AppError) *ServiceInterfaceMock_Create_Call {
	_c.Call.Return(userResponseDTO, appError)
	return _c
}

func (_c *ServiceInterfaceMock_Create_Call) RunAndReturn(run func(body dtos.CreateUserDTO) (*dtos.UserResponseDTO, *web.AppError)) *ServiceInterfaceMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type ServiceInterfaceMock
func (_mock *ServiceInterfaceMock) Login(body dtos.LoginDTO) (string, *web.AppError) {
	ret := _mock.Called(body)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 *web.AppError
	if returnFunc, ok := ret.Get(0).(func(dtos.LoginDTO) (string, *web.AppError)); ok {
		return returnFunc(body)
	}
	if returnFunc, ok := ret.Get(0).(func(dtos.LoginDTO) string); ok {
		r0 = returnFunc(body)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(dtos.LoginDTO) *web.AppError); ok {
		r1 = returnFunc(body)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*web.AppError)
		}
	}
	return r0, r1
}

// ServiceInterfaceMock_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type ServiceInterfaceMock_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - body dtos.LoginDTO
func (_e *ServiceInterfaceMock_Expecter) Login(body interface{}) *ServiceInterfaceMock_Login_Call {
	return &ServiceInterfaceMock_Login_Call{Call: _e.mock.On("Login", body)}
}

func (_c *ServiceInterfaceMock_Login_Call) Run(run func(body dtos.LoginDTO)) *ServiceInterfaceMock_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dtos.LoginDTO
		if args[0] != nil {
			arg0 = args[0].(dtos.LoginDTO)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ServiceInterfaceMock_Login_Call) Return(s string, appError *web.AppError) *ServiceInterfaceMock_Login_Call {
	_c.Call.Return(s, appError)
	return _c
}

func (_c *ServiceInterfaceMock_Login_Call) RunAndReturn(run func(body dtos.LoginDTO) (string, *web.AppError)) *ServiceInterfaceMock_Login_Call {
	_c.Call.Return(run)
	return _c
}
