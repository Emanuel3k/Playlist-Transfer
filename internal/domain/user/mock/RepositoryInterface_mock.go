// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package user_mock

import (
	"github.com/emanuel3k/playlist-transfer/internal/domain"
	"github.com/emanuel3k/playlist-transfer/pkg/web"
	mock "github.com/stretchr/testify/mock"
)

// NewRepositoryInterfaceMock creates a new instance of RepositoryInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryInterfaceMock {
	mock := &RepositoryInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RepositoryInterfaceMock is an autogenerated mock type for the RepositoryInterface type
type RepositoryInterfaceMock struct {
	mock.Mock
}

type RepositoryInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryInterfaceMock) EXPECT() *RepositoryInterfaceMock_Expecter {
	return &RepositoryInterfaceMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type RepositoryInterfaceMock
func (_mock *RepositoryInterfaceMock) Create(user *domain.User) *web.AppError {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *web.AppError
	if returnFunc, ok := ret.Get(0).(func(*domain.User) *web.AppError); ok {
		r0 = returnFunc(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.AppError)
		}
	}
	return r0
}

// RepositoryInterfaceMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RepositoryInterfaceMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - user *domain.User
func (_e *RepositoryInterfaceMock_Expecter) Create(user interface{}) *RepositoryInterfaceMock_Create_Call {
	return &RepositoryInterfaceMock_Create_Call{Call: _e.mock.On("Create", user)}
}

func (_c *RepositoryInterfaceMock_Create_Call) Run(run func(user *domain.User)) *RepositoryInterfaceMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.User
		if args[0] != nil {
			arg0 = args[0].(*domain.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RepositoryInterfaceMock_Create_Call) Return(appError *web.AppError) *RepositoryInterfaceMock_Create_Call {
	_c.Call.Return(appError)
	return _c
}

func (_c *RepositoryInterfaceMock_Create_Call) RunAndReturn(run func(user *domain.User) *web.AppError) *RepositoryInterfaceMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function for the type RepositoryInterfaceMock
func (_mock *RepositoryInterfaceMock) GetByEmail(email string) (*domain.User, *web.AppError) {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *domain.User
	var r1 *web.AppError
	if returnFunc, ok := ret.Get(0).(func(string) (*domain.User, *web.AppError)); ok {
		return returnFunc(email)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = returnFunc(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) *web.AppError); ok {
		r1 = returnFunc(email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*web.AppError)
		}
	}
	return r0, r1
}

// RepositoryInterfaceMock_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type RepositoryInterfaceMock_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - email string
func (_e *RepositoryInterfaceMock_Expecter) GetByEmail(email interface{}) *RepositoryInterfaceMock_GetByEmail_Call {
	return &RepositoryInterfaceMock_GetByEmail_Call{Call: _e.mock.On("GetByEmail", email)}
}

func (_c *RepositoryInterfaceMock_GetByEmail_Call) Run(run func(email string)) *RepositoryInterfaceMock_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RepositoryInterfaceMock_GetByEmail_Call) Return(user *domain.User, appError *web.AppError) *RepositoryInterfaceMock_GetByEmail_Call {
	_c.Call.Return(user, appError)
	return _c
}

func (_c *RepositoryInterfaceMock_GetByEmail_Call) RunAndReturn(run func(email string) (*domain.User, *web.AppError)) *RepositoryInterfaceMock_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}
