// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package spotify_mock

import (
	"github.com/emanuel3k/playlist-transfer/pkg/web"
	mock "github.com/stretchr/testify/mock"
)

// NewRepositoryInterfaceMock creates a new instance of RepositoryInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryInterfaceMock {
	mock := &RepositoryInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RepositoryInterfaceMock is an autogenerated mock type for the RepositoryInterface type
type RepositoryInterfaceMock struct {
	mock.Mock
}

type RepositoryInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryInterfaceMock) EXPECT() *RepositoryInterfaceMock_Expecter {
	return &RepositoryInterfaceMock_Expecter{mock: &_m.Mock}
}

// GetState provides a mock function for the type RepositoryInterfaceMock
func (_mock *RepositoryInterfaceMock) GetState(userID string) (string, *web.AppError) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 string
	var r1 *web.AppError
	if returnFunc, ok := ret.Get(0).(func(string) (string, *web.AppError)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(userID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) *web.AppError); ok {
		r1 = returnFunc(userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*web.AppError)
		}
	}
	return r0, r1
}

// RepositoryInterfaceMock_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type RepositoryInterfaceMock_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
//   - userID string
func (_e *RepositoryInterfaceMock_Expecter) GetState(userID interface{}) *RepositoryInterfaceMock_GetState_Call {
	return &RepositoryInterfaceMock_GetState_Call{Call: _e.mock.On("GetState", userID)}
}

func (_c *RepositoryInterfaceMock_GetState_Call) Run(run func(userID string)) *RepositoryInterfaceMock_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RepositoryInterfaceMock_GetState_Call) Return(s string, appError *web.AppError) *RepositoryInterfaceMock_GetState_Call {
	_c.Call.Return(s, appError)
	return _c
}

func (_c *RepositoryInterfaceMock_GetState_Call) RunAndReturn(run func(userID string) (string, *web.AppError)) *RepositoryInterfaceMock_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// SetAccessToken provides a mock function for the type RepositoryInterfaceMock
func (_mock *RepositoryInterfaceMock) SetAccessToken(accessToken string, ttl int) *web.AppError {
	ret := _mock.Called(accessToken, ttl)

	if len(ret) == 0 {
		panic("no return value specified for SetAccessToken")
	}

	var r0 *web.AppError
	if returnFunc, ok := ret.Get(0).(func(string, int) *web.AppError); ok {
		r0 = returnFunc(accessToken, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.AppError)
		}
	}
	return r0
}

// RepositoryInterfaceMock_SetAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAccessToken'
type RepositoryInterfaceMock_SetAccessToken_Call struct {
	*mock.Call
}

// SetAccessToken is a helper method to define mock.On call
//   - accessToken string
//   - ttl int
func (_e *RepositoryInterfaceMock_Expecter) SetAccessToken(accessToken interface{}, ttl interface{}) *RepositoryInterfaceMock_SetAccessToken_Call {
	return &RepositoryInterfaceMock_SetAccessToken_Call{Call: _e.mock.On("SetAccessToken", accessToken, ttl)}
}

func (_c *RepositoryInterfaceMock_SetAccessToken_Call) Run(run func(accessToken string, ttl int)) *RepositoryInterfaceMock_SetAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RepositoryInterfaceMock_SetAccessToken_Call) Return(appError *web.AppError) *RepositoryInterfaceMock_SetAccessToken_Call {
	_c.Call.Return(appError)
	return _c
}

func (_c *RepositoryInterfaceMock_SetAccessToken_Call) RunAndReturn(run func(accessToken string, ttl int) *web.AppError) *RepositoryInterfaceMock_SetAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// SetState provides a mock function for the type RepositoryInterfaceMock
func (_mock *RepositoryInterfaceMock) SetState(userID string, scope string) *web.AppError {
	ret := _mock.Called(userID, scope)

	if len(ret) == 0 {
		panic("no return value specified for SetState")
	}

	var r0 *web.AppError
	if returnFunc, ok := ret.Get(0).(func(string, string) *web.AppError); ok {
		r0 = returnFunc(userID, scope)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*web.AppError)
		}
	}
	return r0
}

// RepositoryInterfaceMock_SetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetState'
type RepositoryInterfaceMock_SetState_Call struct {
	*mock.Call
}

// SetState is a helper method to define mock.On call
//   - userID string
//   - scope string
func (_e *RepositoryInterfaceMock_Expecter) SetState(userID interface{}, scope interface{}) *RepositoryInterfaceMock_SetState_Call {
	return &RepositoryInterfaceMock_SetState_Call{Call: _e.mock.On("SetState", userID, scope)}
}

func (_c *RepositoryInterfaceMock_SetState_Call) Run(run func(userID string, scope string)) *RepositoryInterfaceMock_SetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RepositoryInterfaceMock_SetState_Call) Return(appError *web.AppError) *RepositoryInterfaceMock_SetState_Call {
	_c.Call.Return(appError)
	return _c
}

func (_c *RepositoryInterfaceMock_SetState_Call) RunAndReturn(run func(userID string, scope string) *web.AppError) *RepositoryInterfaceMock_SetState_Call {
	_c.Call.Return(run)
	return _c
}
