// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package spotify_mock

import (
	"github.com/emanuel3k/playlist-transfer/internal/domain/spotify"
	"github.com/emanuel3k/playlist-transfer/pkg/web"
	mock "github.com/stretchr/testify/mock"
)

// NewProviderInterfaceMock creates a new instance of ProviderInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProviderInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProviderInterfaceMock {
	mock := &ProviderInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ProviderInterfaceMock is an autogenerated mock type for the ProviderInterface type
type ProviderInterfaceMock struct {
	mock.Mock
}

type ProviderInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ProviderInterfaceMock) EXPECT() *ProviderInterfaceMock_Expecter {
	return &ProviderInterfaceMock_Expecter{mock: &_m.Mock}
}

// GetAccessToken provides a mock function for the type ProviderInterfaceMock
func (_mock *ProviderInterfaceMock) GetAccessToken(code string) (*spotify.GetAccessTokenSpotifyAPIResponse, *web.AppError) {
	ret := _mock.Called(code)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessToken")
	}

	var r0 *spotify.GetAccessTokenSpotifyAPIResponse
	var r1 *web.AppError
	if returnFunc, ok := ret.Get(0).(func(string) (*spotify.GetAccessTokenSpotifyAPIResponse, *web.AppError)); ok {
		return returnFunc(code)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *spotify.GetAccessTokenSpotifyAPIResponse); ok {
		r0 = returnFunc(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*spotify.GetAccessTokenSpotifyAPIResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) *web.AppError); ok {
		r1 = returnFunc(code)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*web.AppError)
		}
	}
	return r0, r1
}

// ProviderInterfaceMock_GetAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessToken'
type ProviderInterfaceMock_GetAccessToken_Call struct {
	*mock.Call
}

// GetAccessToken is a helper method to define mock.On call
//   - code string
func (_e *ProviderInterfaceMock_Expecter) GetAccessToken(code interface{}) *ProviderInterfaceMock_GetAccessToken_Call {
	return &ProviderInterfaceMock_GetAccessToken_Call{Call: _e.mock.On("GetAccessToken", code)}
}

func (_c *ProviderInterfaceMock_GetAccessToken_Call) Run(run func(code string)) *ProviderInterfaceMock_GetAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ProviderInterfaceMock_GetAccessToken_Call) Return(getAccessTokenSpotifyAPIResponse *spotify.GetAccessTokenSpotifyAPIResponse, appError *web.AppError) *ProviderInterfaceMock_GetAccessToken_Call {
	_c.Call.Return(getAccessTokenSpotifyAPIResponse, appError)
	return _c
}

func (_c *ProviderInterfaceMock_GetAccessToken_Call) RunAndReturn(run func(code string) (*spotify.GetAccessTokenSpotifyAPIResponse, *web.AppError)) *ProviderInterfaceMock_GetAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthURI provides a mock function for the type ProviderInterfaceMock
func (_mock *ProviderInterfaceMock) GetAuthURI(userId string) string {
	ret := _mock.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthURI")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(userId)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// ProviderInterfaceMock_GetAuthURI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthURI'
type ProviderInterfaceMock_GetAuthURI_Call struct {
	*mock.Call
}

// GetAuthURI is a helper method to define mock.On call
//   - userId string
func (_e *ProviderInterfaceMock_Expecter) GetAuthURI(userId interface{}) *ProviderInterfaceMock_GetAuthURI_Call {
	return &ProviderInterfaceMock_GetAuthURI_Call{Call: _e.mock.On("GetAuthURI", userId)}
}

func (_c *ProviderInterfaceMock_GetAuthURI_Call) Run(run func(userId string)) *ProviderInterfaceMock_GetAuthURI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ProviderInterfaceMock_GetAuthURI_Call) Return(s string) *ProviderInterfaceMock_GetAuthURI_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *ProviderInterfaceMock_GetAuthURI_Call) RunAndReturn(run func(userId string) string) *ProviderInterfaceMock_GetAuthURI_Call {
	_c.Call.Return(run)
	return _c
}
